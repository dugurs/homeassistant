blueprint:
  name: "Xiaomi FP1 region sensor"
  description: "1.3"
  domain: automation

  input:
    presence:
      name: "FP1 Presence binary_sensor"
      selector:
        entity:
          domain: binary_sensor
          device_class: presence
    action:
      name: "FP1 Action Sensor"
      selector:
        entity:
          domain: sensor
    region:
      name: "region id"
      description: "region upsert id"
      default: 1
      selector:
        number:
          min: 1
          max: 10
    target_device:
      name: "target device"
      description: ""
      selector:
        entity:
          domain:
            - switch
            - light
            - fan
            - input_boolean
    auto_on_time_after:
      name: 켜기 자동화 사용 시작 시간
      description: "부터\n 끝 시간 보다 클 수 없습니다."
      default: "6:30:00"
      selector:
        time: {}
    auto_on_time_before:
      name: 켜기 자동화 사용 끝 시간
      description: "까지\n 시작 시간 보다 작을 수 없습니다."
      default: "21:00:00"
      selector:
        time: {}

trigger_variables:
  presence: !input presence
trigger:
  - platform: state
    entity_id: !input action
    id: taction
  - platform: template
    value_template: "{{ states[presence].state == 'off' }}"
    id: tpresence_off

variables:
  region: !input region
  target_device: !input target_device
  target_damain: "{{ target_device.split('.')[0] }}"

condition:
  - condition: template
    value_template: "{{ not trigger.to_state.state in ['unavailable', 'unknown', 'None', '', Null] }}"

action:
  - variables:
      tostate: "{{ trigger.to_state.state }}"
  - choose:
      - conditions:
          - condition: trigger
            id: taction
          - condition: template
            value_template: "{{ tostate.split('_')[1]|int == region }}"
          - condition: template
            value_template: "{{ tostate.split('_')[2] in ['occupied', 'enter', 'leave','unoccupied'] }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ tostate.split('_')[2] in ['occupied', 'enter'] }}"
            then:
              - if:
                  - condition: time
                    after: !input auto_on_time_after
                    before: !input auto_on_time_before
                then:
                  - service: "{{target_damain}}.turn_on"
                    target:
                      entity_id: !input target_device
            else:
              - delay: 00:00:03
              - service: "{{target_damain}}.turn_off"
                target:
                  entity_id: !input target_device
      - conditions:
          - condition: trigger
            id: tpresence_off
        sequence:
          - service: "{{target_damain}}.turn_off"
            target:
              entity_id: !input target_device
    default: []

mode: restart
